import { createUserWithEmailAndPassword, getAuth, sendEmailVerification, signInWithEmailAndPassword } from "firebase/auth";
import { firebaseAppConfig } from "../../config/firebaseConfig.js";
import User from "../../models/user.model.js";
import { User_auth } from "../../models/user_auth.model.js";


const firebaseAuth = getAuth(firebaseAppConfig)

// Function to register a new user in the firebase and return the uid
const registerUser = async(email, password) => {
    const registerResponse = await createUserWithEmailAndPassword(firebaseAuth, email, password);
    return {uid : registerResponse.user.uid, data : registerResponse}
}

export const newUser = async (req, res, next) => {
    try {
        const { username, email, firstname, lastname, title, bio, password } = req.body;

        // This is the uid generated by firebase
        const userFirebaseId = await registerUser(email, password);
        console.log(userFirebaseId.data._tokenResponse.expiresIn);


        // Create new user
        const user = await User.create({
            _id: userFirebaseId.uid,
            email : email,
            username : username,
            firstname : firstname,
            lastname : lastname,
            title : title,
            bio : bio
        });

        user.save()

        const data = { 
            email : email, 
            hashed_token : userFirebaseId.uid, 
            expiration_time : userFirebaseId.data.user.stsTokenManager.expirationTime,
            expiration_duration : userFirebaseId.data._tokenResponse.expiresIn,
            is_logined : true
        }

        const userAuth = await User_auth.findOne({email : email})
        if (userAuth) {
            await User_auth.updateOne({email : email}, data)
        } else {
            await User_auth.create(data)
        }

        // User Email Verification
        sendEmailVerification(firebaseAuth.currentUser)


        return res.status(201).json({
            success: true,
            data: user,
            fulldata : userFirebaseId.data
        });
    } catch (error) {
        return res.status(500).json({
            success: false,
            message: error.message
        });
    }
};




const signin = async (email, password) => {
    const serverres = await signInWithEmailAndPassword(firebaseAuth, email, password)
    return serverres
}

export const loginUser = async (req, res, next) => {
    try {
        const { email, password } = req.body;

        // This is the uid generated by firebase
        const userFirebaseId = await signin(email, password)

        const data = { 
            email : userFirebaseId.user.email, 
            hashed_token : userFirebaseId.user.uid, 
            expiration_time : userFirebaseId.user.stsTokenManager.expirationTime,
            expiration_duration : userFirebaseId._tokenResponse.expiresIn,
            is_logined : true
        }

        const userAuth = await User_auth.findOne({email : email})
        if (userAuth) {
            await User_auth.updateOne({email : email}, data)
        } else {
            await User_auth.create(data)
        }

        // localStorage.setItem("POST.dev@accessToken", userFirebaseId.user.uid);

        return res.status(201).json({
            success: true,
            fulldata : userFirebaseId,
            data: {
                email : userFirebaseId.user.email, 
                access_token : userFirebaseId.user.stsTokenManager.accessToken, 
                expiration_time : userFirebaseId.user.stsTokenManager.expirationTime, 
                expire_duration : userFirebaseId._tokenResponse.expiresIn,
                uid : userFirebaseId.user.uid
            }
        });
    } catch (error) {
        return res.status(500).json({
            success: false,
            message: error.message
        });
    }
};


